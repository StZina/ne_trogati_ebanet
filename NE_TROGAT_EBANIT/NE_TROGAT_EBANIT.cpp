#include "Library.h"


    int main() {
        setlocale(LC_ALL, "Russian");
        SetConsoleCP(1251);
        InitGame();
        game();



        /*string g =  "TEST";
        to_lower(g);
        cout << g;*/



    }
    //void diolog(); {
      //    if (player.current_loc != 4) {
      //        cout << "Кек";

      //    }
      //    if (player.current_loc == 0 && find(player.item_p.begin(), player.item_p.end(), item_::notebook) != player.item_p.end()) {
      //        auto it = remove_if(player.item_p.begin(), player.item_p.end(), [](const item_& x) { return x == item_::notebook; });
      //        player.item_p.erase(it, player.item_p.end());

      //        // Реакция девушки на ресепшене
      //        text("\nДевушка на ресепшене благодарно улыбнулась и сказала: \"Спасибо!\"\n", 100);
      //    }
      //}
    /*if (chouse == "item") {

        for (int i = 0; i < player.item_p.size(); i++) {
            cout << "Predmet: " << items_item[(int)player.item_p[i]] << endl;
        }

    }

    if (chouse == "seek") {
        for (int i = 0; i < room[player.current_loc].item_l.size(); i++) {
            cout << "Predmet " << room[player.current_loc].item_l[i] << endl;
        }
    }
    }*/
    //#include <iostream>
    //#include <string> // подключаем библиотеку для стринг
    //#include <vector>
    //
    //using namespace std;
    //
    //enum class item_ { // структура предметов, в ней представленны значения в виде чисел, axe содержит в себе 0, sword содержит 1 и т.д
    //
    //    axe,
    //    sword,
    //    hemlet,
    //    key
    //};
    //
    //string itemLib[] = { "axe","sword","hemlet", "key" }; // создал массив с именами предметов, в который будут передаваться предметы 
    //
    //struct player_ {
    //
    //    int current_loc = 0; // переменная отвечает в какой локации будет находиться игрок
    //    bool life = true; // переменная, отвечающая за жизнь игрока
    //    vector<item_> item; // созадим вектор типа item_, это будет наш инвенарь, там будут храниться наши предметы в виде цифр.
    //};
    //
    //
    //struct portal_ { // структура портала, в которой будут лежать все переменные, связанные с порталом
    //
    //    string name; // имя портала
    //    int target;  // куда будет вести портал, в какую локацию
    //    bool activ;
    //
    //};
    //
    //struct location_ {      // создали структуру локации, в ней есть имя и наши портал, по которым мы будем перемещаться
    //
    //    string name; // имя локации
    //    vector<portal_>portal; // раньше вектор был типа int, но так как мы добавили структуру порталов, и имена порталов в структуре, нужно чтобы вектор был типа portal_ 
    //    vector<item_>item;
    //
    //};
    //
    //player_ user; // создали глобальную переменную игрока
    //location_ room[4];
    //
    //void InitGame() {       // создаем функцию которая будет заносить все наши значения в массив room
    //
    //    room[0].name = "Home"; // задаем кажой комнате имя
    //    room[0].portal.push_back({ "green_door", 1 , false }); // закидываем в векотор portal с помощью метода: имя, и куда ведет локация
    //    room[0].portal.push_back({ "black_door", 2, false });
    //    room[0].item.push_back((item_::axe));// закинул предмет
    //
    //    room[1].name = "room";
    //    room[1].portal.push_back({ "back", 0 , true });
    //    room[1].item.push_back((item_::sword));// закинули предмет
    //    room[1].item.push_back((item_::hemlet));
    //
    //    room[2].name = "Entrance";
    //    room[2].portal.push_back({ "back", 0 , true });
    //    room[2].portal.push_back({ "iron_door", 3, false });
    //
    //    room[3].name = "Street";
    //
    //    user.item.push_back(item_::key); // добавили в наш инвентарь топор, чтобы протестировать
    //
    //}
    //
    //// use команд, реализовал скрытые порталы
    //int main()
    //{
    //
    //    InitGame();
    //    string chouse; // создали переменную для ввода пользователя
    //
    //    cout << "You're in location: " << room[user.current_loc].name << endl; // выведем имя локации  в которой находится игрок
    //
    //    while (user.life) { // цикл игры, пока пользователь живой
    //
    //        cin >> chouse;
    //
    //        if (chouse == "help") {
    //
    //            cout << "1.go\n2.list\n3.trunk\n4.pick\n5.drop\n6.use\n";
    //        }
    //
    //
    //        if (chouse == "go") { // логика работы наших команд, если ввели go, нам будут показываться все доступные порталы в локации, где находится игрок
    //
    //            for (int i = 0; i < room[user.current_loc].portal.size(); i++) {  // идем по массиву порталов в кажой локции где находится персонаж
    //
    //                auto p = room[user.current_loc].portal[i];
    //
    //                cout << room[user.current_loc].portal[i].name << (p.activ ? " is unlocked" : " is locked") << endl; // здесь будут уже не цифры а имена порталов.
    //            }
    //
    //
    //            cin >> chouse;// повторный ввод на имя портала
    //
    //
    //            for (int i = 0; i < room[user.current_loc].portal.size(); i++) {
    //
    //
    //                if (chouse == room[user.current_loc].portal[i].name) { // если ввод пользователя сходится с именем портала локации
    //
    //                    if (room[user.current_loc].portal[i].activ) { // проверка, на активен ли портал
    //
    //                        user.current_loc = room[user.current_loc].portal[i].target; // то мы текущую локацию игрока, меняем на таргет портала, куда ведет портал, в какую комнату
    //
    //                        cout << "You're in location: " << room[user.current_loc].name << endl;
    //                    }
    //                    else {
    //                        cout << "LOCKED\n";
    //                    }
    //                }
    //            }
    //        }
    //
    //        if (chouse == "trunk") {
    //
    //            for (int i = 0; i < user.item.size(); i++) { // идем по массиву item, нам нужна его размерность 
    //                cout << itemLib[(int)user.item[i]] << endl; // я прировнял цифровые переменные, которые храняться в массиве инвентаря к int и передаю в массив string
    //
    //            }
    //
    //        }
    //
    //        if (chouse == "list") { //  показать все предметы, находящиеся в локации
    //
    //            cout << "You have found: \n";
    //
    //            for (int i = 0; i < room[user.current_loc].item.size(); i++) {
    //
    //                cout << itemLib[(int)room[user.current_loc].item[i]] << endl;
    //            }
    //
    //        }
    //
    //        if (chouse == "pick") { // подобрать предмет
    //
    //            cin >> chouse;
    //
    //            for (int i = 0; i < room[user.current_loc].item.size(); i++) {
    //
    //                if (chouse == itemLib[(int)room[user.current_loc].item[i]]) {
    //
    //                    cout << "You have picked item: " << itemLib[(int)room[user.current_loc].item[i]] << endl;
    //                    user.item.emplace_back(room[user.current_loc].item[i]); // добавил предмет в инвентарь игрока
    //                    room[user.current_loc].item.erase(room[user.current_loc].item.cbegin() + i); // удалил предмет из локации
    //
    //                }
    //
    //            }
    //
    //        }
    //
    //        if (chouse == "drop") {
    //
    //            cin >> chouse;
    //
    //            for (int i = 0; i < user.item.size(); i++) {
    //
    //                if (chouse == itemLib[(int)user.item[i]]) {
    //
    //                    cout << "You have deleted item: " << itemLib[(int)user.item[i]] << endl;
    //                    room[user.current_loc].item.emplace_back(user.item[i]); // добавил предмет в инвентарь локации
    //                    user.item.erase(user.item.cbegin() + i); // удалил предмет из инвенторя игрока
    //
    //                }
    //
    //            }
    //
    //        }
    //
    //
    //        if (chouse == "use") {
    //
    //            int dir;
    //
    //            if (!user.item.empty()) {
    //
    //                for (int i = 0; i < user.item.size(); i++) {
    //
    //                    cout << i + 1 << ". " << itemLib[(int)user.item[i]] << endl;
    //
    //                }
    //
    //                cout << "Enter number item\n";
    //
    //                cin >> dir;
    //
    //
    //
    //
    //                switch ((int)user.item[dir - 1]) {
    //
    //                case 0: {
    //
    //                    cout << "use axe\n";
    //                    break;
    //
    //                }
    //
    //                case 1: {
    //
    //                    cout << "use sword\n";
    //                    break;
    //
    //                }
    //
    //                case 2: {
    //
    //                    cout << "use hemlet\n";
    //                    break;
    //
    //                }
    //
    //                case 3: {
    //
    //                    for (int i = 0; i < room[user.current_loc].portal.size(); i++) {
    //
    //                        cout << i + 1 << ". " << room[user.current_loc].portal[i].name << endl;
    //
    //                    }
    //                    cout << "Enter number door: \n";
    //
    //                    cin >> dir;
    //
    //                    room[user.current_loc].portal[dir - 1].activ ? room[user.current_loc].portal[dir - 1].activ = false : room[user.current_loc].portal[dir - 1].activ = true; //читайте про тернарный оператор
    //
    //                    cout << "You're " << (room[user.current_loc].portal[dir - 1].activ ? "unlocked door " : "locked door ") << room[user.current_loc].portal[dir - 1].name << endl;
    //
    //                    break;
    //
    //                }
    //
    //                }
    //
    //
    //            }
    //        }
    //    }
    //}

